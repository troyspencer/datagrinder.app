// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datagrinder.proto

package datagrinder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GrinderInput struct {
	Setting              int32    `protobuf:"varint,1,opt,name=Setting" json:"Setting,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	Width                int32    `protobuf:"varint,3,opt,name=Width" json:"Width,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrinderInput) Reset()         { *m = GrinderInput{} }
func (m *GrinderInput) String() string { return proto.CompactTextString(m) }
func (*GrinderInput) ProtoMessage()    {}
func (*GrinderInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_datagrinder_09ba3fd3543e993c, []int{0}
}
func (m *GrinderInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrinderInput.Unmarshal(m, b)
}
func (m *GrinderInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrinderInput.Marshal(b, m, deterministic)
}
func (dst *GrinderInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrinderInput.Merge(dst, src)
}
func (m *GrinderInput) XXX_Size() int {
	return xxx_messageInfo_GrinderInput.Size(m)
}
func (m *GrinderInput) XXX_DiscardUnknown() {
	xxx_messageInfo_GrinderInput.DiscardUnknown(m)
}

var xxx_messageInfo_GrinderInput proto.InternalMessageInfo

func (m *GrinderInput) GetSetting() int32 {
	if m != nil {
		return m.Setting
	}
	return 0
}

func (m *GrinderInput) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GrinderInput) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

type GrinderOutput struct {
	Base64Image          string   `protobuf:"bytes,1,opt,name=Base64image" json:"Base64image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrinderOutput) Reset()         { *m = GrinderOutput{} }
func (m *GrinderOutput) String() string { return proto.CompactTextString(m) }
func (*GrinderOutput) ProtoMessage()    {}
func (*GrinderOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_datagrinder_09ba3fd3543e993c, []int{1}
}
func (m *GrinderOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrinderOutput.Unmarshal(m, b)
}
func (m *GrinderOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrinderOutput.Marshal(b, m, deterministic)
}
func (dst *GrinderOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrinderOutput.Merge(dst, src)
}
func (m *GrinderOutput) XXX_Size() int {
	return xxx_messageInfo_GrinderOutput.Size(m)
}
func (m *GrinderOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_GrinderOutput.DiscardUnknown(m)
}

var xxx_messageInfo_GrinderOutput proto.InternalMessageInfo

func (m *GrinderOutput) GetBase64Image() string {
	if m != nil {
		return m.Base64Image
	}
	return ""
}

func init() {
	proto.RegisterType((*GrinderInput)(nil), "GrinderInput")
	proto.RegisterType((*GrinderOutput)(nil), "GrinderOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrinderClient is the client API for Grinder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrinderClient interface {
	// Returns a grind result
	Grind(ctx context.Context, in *GrinderInput, opts ...grpc.CallOption) (*GrinderOutput, error)
}

type grinderClient struct {
	cc *grpc.ClientConn
}

func NewGrinderClient(cc *grpc.ClientConn) GrinderClient {
	return &grinderClient{cc}
}

func (c *grinderClient) Grind(ctx context.Context, in *GrinderInput, opts ...grpc.CallOption) (*GrinderOutput, error) {
	out := new(GrinderOutput)
	err := c.cc.Invoke(ctx, "/Grinder/Grind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrinderServer is the server API for Grinder service.
type GrinderServer interface {
	// Returns a grind result
	Grind(context.Context, *GrinderInput) (*GrinderOutput, error)
}

func RegisterGrinderServer(s *grpc.Server, srv GrinderServer) {
	s.RegisterService(&_Grinder_serviceDesc, srv)
}

func _Grinder_Grind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrinderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrinderServer).Grind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Grinder/Grind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrinderServer).Grind(ctx, req.(*GrinderInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grinder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Grinder",
	HandlerType: (*GrinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grind",
			Handler:    _Grinder_Grind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datagrinder.proto",
}

func init() { proto.RegisterFile("datagrinder.proto", fileDescriptor_datagrinder_09ba3fd3543e993c) }

var fileDescriptor_datagrinder_09ba3fd3543e993c = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x49, 0x2c, 0x49,
	0x4c, 0x2f, 0xca, 0xcc, 0x4b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x0a, 0xe3,
	0xe2, 0x71, 0x87, 0x08, 0x78, 0xe6, 0x15, 0x94, 0x96, 0x08, 0x49, 0x70, 0xb1, 0x07, 0xa7, 0x96,
	0x94, 0x64, 0xe6, 0xa5, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xb8, 0x42, 0x62, 0x5c,
	0x6c, 0x1e, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x12, 0x4c, 0x60, 0x09, 0x28, 0x4f, 0x48, 0x84, 0x8b,
	0x35, 0x3c, 0x33, 0xa5, 0x24, 0x43, 0x82, 0x19, 0x2c, 0x0c, 0xe1, 0x28, 0x19, 0x72, 0xf1, 0x42,
	0xcd, 0xf5, 0x2f, 0x2d, 0x01, 0x19, 0xac, 0xc0, 0xc5, 0xed, 0x94, 0x58, 0x9c, 0x6a, 0x66, 0x92,
	0x99, 0x9b, 0x98, 0x9e, 0x0a, 0x36, 0x9c, 0x33, 0x08, 0x59, 0xc8, 0xc8, 0x98, 0x8b, 0x1d, 0xaa,
	0x45, 0x48, 0x83, 0x8b, 0x15, 0xcc, 0x14, 0xe2, 0xd5, 0x43, 0x76, 0x9d, 0x14, 0x9f, 0x1e, 0x8a,
	0xa1, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x6f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x22, 0xfc,
	0x8f, 0xb6, 0xdb, 0x00, 0x00, 0x00,
}
